from http.client import HTTPException
import logging

from src.ChatHandler import ChatHandler
from src.AssitantHandler import AssistantHandler

logging.basicConfig(level=logging.INFO)

class MessageHandler:
    def __init__(self):
        """
        Initializes the MessageHandler class.
        """
           
    def initialize_conversation(self, to_phone_number: str):
        """
        Initializes a conversation by sending a welcome message.
        This method can be expanded to include more complex initialization logic.
        """
        
        assitant_handler = AssistantHandler()
        
        initial_message = assitant_handler.get_initial_message()
        
        logging.info(f"Initial message generated by LLM: {initial_message}")
        
        #Send the response to the user
        response = self.send_message(initial_message, to_phone_number)
        
        return response
            
    def handle_message(self, message: str, phone_from: str):
        """
        Handles incoming messages and stores them in the message list.
        
        Args:
            message (str): The message to be handled.
        """
        
        if not phone_from:
            raise HTTPException(status_code=500, detail="Parameter 'From' is required and was not provided.")
    
        if not message:
            raise HTTPException(status_code=500, detail="Parameter 'Body' is required and was not provided.")
        
        from_split = phone_from.split(":")  # The phone number of the sender 
        
        if len(from_split) < 2:
            raise HTTPException(status_code=500, detail="Invalid phone number format.")
        
        from_ = from_split[1]
        
        logging.info(f"Received Body '{message}' and From '{from_}'")
        
        #Send the message to GPT Assitant
        assitant_handler = AssistantHandler()
        
        response = assitant_handler.get_assistant_response(message)
        
        logging.info(f"Message generated by LLM: {response}")
        
        if response['qrcode_url'] is not None:
            self.send_message(
                f"""Agendamento realizado com sucesso!!
No link a seguir terÃ¡ o QR Code de seu agendamento: {response['qrcode_url']}

Mostre o QR Code ao vendedor na hora agendada.""",
                from_
            )
        
        #Send the response to the user
        response = self.send_message(response['message'], from_)

        logging.info(f"Message sent to user: {from_}")

        return response
    
    def send_message(self, message: str, to_phone_number: str):
        """
        Sends a message to the specified phone number.
        
        Args:
            message (str): The message to be sent.
            to_phone_number (str): The phone number to send the message to.
        """
        print(f"Sending message: {message} to {to_phone_number}")
        
        chat_handler = ChatHandler()
        chat_handler.send_message(message, to_phone_number)
        
        return message